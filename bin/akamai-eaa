#!/usr/bin/env python3

# Copyright 2021 Akamai Technologies, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
cli-eaa
Command Line Input tool for Akamai Enterprise Application Access
:url: https://github.com/akamai/cli-eaa
:author: Antoine Drochon <androcho@akamai.com>
"""

from __future__ import print_function
import sys
import requests
import time
import platform
import logging
import util
import fnmatch
from enum import Enum
import re

# cli-eaa
import _paths
from common import cli, config, BaseAPI, EAAItem, __version__
from eventlog import EventLogAPI
from cert import CertificateAPI
from application import ApplicationAPI
from idp import IdentityProviderAPI
from connector import ConnectorAPI

verbose = getattr(config, 'verbose', False)

LOG_FMT = '%(asctime)s [%(levelname)s] %(threadName)s %(message)s'
log_file = None


class SearchAPI(BaseAPI):
    """
    Search EAA applications
    2020-08-07: migrated to {OPEN} API
    """

    SCAN_LIMIT = 1000

    def __init__(self, config):
        super(SearchAPI, self).__init__(config, api=BaseAPI.API_Version.OpenAPI)

    def search_app(self, search_pattern):
        url_params = {'limit': SearchAPI.SCAN_LIMIT, 'expand': 'true'}
        search_app = self.get('mgmt-pop/apps', params=url_params)
        self.process_response(search_app.json(), search_pattern)

    def process_response(self, data, search_pattern):
        app_found = 0
        if data.get("meta"):
            app_count = data.get("meta").get("total_count")
            # Header
            cli.print('#app_id,type,name,host,cname,cert_id,status,reachable')
            for a in data.get('objects', []):
                if not search_pattern or (
                    search_pattern and (
                        fnmatch.fnmatch(a.get('name') or "", "*%s*" % search_pattern) or
                        fnmatch.fnmatch(a.get('host') or "", "*%s*" % search_pattern) or
                        fnmatch.fnmatch(a.get('cname') or "", "*%s*" % search_pattern)
                    )
                ):
                    cli.print(('{scheme}{app_id},{app_type},{name},{host},{cname},'
                               '{cert_scheme}{cert_id},{status},{reach}').format(
                        scheme=EAAItem.Type.Application.scheme,
                        app_id=a.get('uuid_url'),
                        app_type=ApplicationAPI.Type(a.get('app_type')).name,
                        name=a.get('name'),
                        host=a.get('host'),
                        cname=a.get('cname'),
                        cert_scheme=EAAItem.Type.Certificate.scheme,
                        cert_id=a.get('cert'),
                        status=ApplicationAPI.Status(a.get('app_status')).name,
                        reach=('Y' if a.get('resource_status', {}).get('host_reachable') else 'F'))
                    )
                    # cli.print(json.dumps(a))
                    app_found += 1
            # Footer
            if not config.batch:
                if app_found != app_count:
                    cli.footer("Found %s app(s), total %s app(s)" % (app_found, app_count))
                else:
                    cli.footer("%s app(s)" % app_count)


class DirectoryAPI(BaseAPI):
    """
    Interact with EAA directory configurations.
    """
    # class DirectoryType(Enum):
    #     CloudDirectory  7
    #     LDAP: 10,
    #     ActiveDirectory: 108

    class DirectoryStatus(Enum):
        Status3 = 3

    def __init__(self, config, directory_moniker=None):
        super(DirectoryAPI, self).__init__(config, BaseAPI.API_Version.OpenAPI)
        self._directory = None
        self._directory_id = None
        if directory_moniker:
            self._directory = EAAItem(directory_moniker)
            self._directory_id = self._directory.uuid

    def list_groups(self):
        url_params = {'limit': 0}
        url = 'mgmt-pop/directories/{directory_id}/groups'.format(directory_id=self._directory_id)
        if self._config.search_pattern:
            url_params = url_params.update({'q': self._config.search_pattern})
        resp = self.get(url, params=url_params)
        resj = resp.json()
        cli.header("#GroupID,name,last_sync")
        for u in resj.get('objects'):
            print('{scheme}{uuid},{name},{last_sync_time}'.format(
                scheme=EAAItem.Type.Group.scheme,
                uuid=u.get('uuid_url'),
                name=u.get('name'),
                last_sync_time=u.get('last_sync_time')
            ))

    def list_users(self, search=None):
        logging.info("SEARCH %s" % search)
        url_params = {'limit': 0}
        url = 'mgmt-pop/users'
        if search:
            url_params.update({'q': search})
        resp = self.get(url, params=url_params)
        resj = resp.json()
        for u in resj.get('objects'):
            cli.print("{scheme}{uuid},{fn},{ln}".format(
                scheme=EAAItem.Type.User.scheme,
                uuid=u.get('uuid_url'),
                fn=u.get('first_name'),
                ln=u.get('last_name')
            ))

    def list_directories(self):
        if self._directory_id:
            if self._config.users:
                if self._config.search_pattern and not self._config.batch:
                    cli.header("# list users matching %s in %s" % (self._config.search_pattern, self._directory_id))
                self.list_users(self._config.search_pattern)
            elif self._config.groups:
                if self._config.search_pattern and not self._config.batch:
                    cli.header("# list groups matching %s" % self._config.search_pattern)
                self.list_groups()
        else:
            resp = self.get("mgmt-pop/directories")
            if resp.status_code != 200:
                logging.error("Error retrieve directories (%s)" % resp.status_code)
            resj = resp.json()
            # print(resj)
            if not self._config.batch:
                cli.header("#dir_id,dir_name,status,user_count")
            total_dir = 0
            for total_dir, d in enumerate(resj.get("objects"), start=1):
                cli.print("{scheme}{dirid},{name},{status},{user_count}".format(
                    scheme=EAAItem.Type.Directory.scheme,
                    dirid=d.get("uuid_url"),
                    name=d.get("name"),
                    status=d.get("directory_status"),
                    user_count=d.get("user_count"))
                )
            if total_dir == 0:
                cli.footer("No EAA Directory configuration found.")
            elif total_dir == 1:
                cli.footer("One EAA Directory configuration found.")
            else:
                cli.footer("%d EAA Directory configurations found." % total_dir)

    def delgroup(self, group_id):
        raise NotImplementedError("Group deletion is not implemented")

    def deloverlaygroup(self, group_id):
        raise NotImplementedError("Group Overlay deletion is not implemented")
        url = "mgmt-pop/directories/{directory_id}/groups/{group_id}".format(
                directory_id=self._directory_id,
                group_id=group_id
            )
        self.delete(url)

    def addoverlaygroup(self, groupname):
        url = "mgmt-pop/directories/{directory_id}/groups".format(directory_id=self._directory_id)
        resp = self.post(url, json={"status": 1, "group_type": 4, "name": groupname})
        if resp.status_code != 200:
            logging.error("Error adding group to directory %s" % self._directory_id)
        else:
            cli.footer("Overlay group %s added to directory %s" % (groupname, self._directory_id))

    @staticmethod
    def groupname_from_dn(dn):
        """
        Extract the group name from a full Distinguished Name string.
        Reference: https://regexr.com/3l4au
        """
        regexp = '^(?:(?P<cn>CN=(?P<name>[^,]*)),)?(?:(?P<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?P<domain>(?:DC=[^,]+,?)+)$'
        matches = re.search(regexp, dn)
        if matches:
            return matches.group('name')
        else:
            return False

    def addgroup(self, dn):
        """
        Add a group to EAA Directory configuration.
        :param dn: Distiguished Name of the group
                   Example: CN=Print Operators,CN=Builtin,DC=AKAMAIDEMO,DC=NET
        """
        url = "mgmt-pop/directories/{directory_id}/groups".format(directory_id=self._directory_id)
        for scanned_dn in util.argument_tolist((dn,)):
            group = DirectoryAPI.groupname_from_dn(scanned_dn)
            if group:
                logging.debug("Adding group %s" % (scanned_dn))
                resp = self.post(url, json={"name": group, "dn": scanned_dn})
                if resp.status_code != requests.status_codes.codes.ok:
                    logging.error(resp.status_code)
            else:
                logging.warn("Invalid DN: %s" % scanned_dn)

    def synchronize(self):
        print("Synchronize directory %s..." % self._directory_id)
        response = self.post("mgmt-pop/directories/{dirId}/sync".format(dirId=self._directory_id))
        if response.status_code == 200 and not self._config.batch:
            print("Directory %s synchronization requested." % self._directory_id)


class ReportingAPI(BaseAPI):
    def __init__(self, config):
        super(ReportingAPI, self).__init__(config, api=BaseAPI.API_Version.OpenAPI)

    def clients(self):
        now = time.time()
        params = {
            'limit': 0,
            'start': int((now - 30 * 24 * 60 * 60) * 1000),
            'end': int(now * 1000)
        }
        resp = self.get('mgmt-pop/clients', params=params)
        if resp.status_code != 200:
            logging.error(resp.text)
        data = resp.json()
        cli.header("#device_id,version,idp_user,idp_host,lastseen")
        for count, c in enumerate(data.get('objects', {})):
            cli.print("{device_id},{version},{idp_user},{idp_host},{lastseen}".format(
                device_id=c.get("device_id"),
                version=c.get("device_info", {}).get("version"),
                idp_user=c.get("idp_user"),
                idp_host=c.get("idp_host"),
                lastseen=c.get("timestamp")
            ))
        cli.footer("%s unique EAA Clients checked-in in the last 30 days" % count)


if __name__ == "__main__":

    logging.basicConfig(filename=log_file, level=cli.log_level(), format=LOG_FMT)
    logging.debug("Python %s" % platform.python_version())

    try:
        if config.command == "version":
            print(__version__)
        elif config.command in ("log", "l"):
            events = EventLogAPI(config)
            events.fetch_logs(cli.exit_gracefully, cli.stop_event)
        elif config.command in ("search", "s"):
            s = SearchAPI(config)
            s.search_app(config.pattern)
        elif config.command in ("dir", "d"):
            if config.action is None or config.action == "list":
                directory_id = None
                if hasattr(config, 'directory_id'):
                    directory_id = config.directory_id
                d = DirectoryAPI(config, directory_id)
                d.list_directories()
            else:
                d = DirectoryAPI(config, config.directory_id)
                if config.action == "sync":
                    d.synchronize()
                elif config.action == "addgroup":
                    d.addgroup(config.dn)
                elif config.action == "addovlgroup":
                    d.addoverlaygroup(config.group)
                else:
                    raise Exception("Unsupported directory action: %s" % config.action)
        elif config.command in ("app", "a"):
            a = ApplicationAPI(config)
            a.process_command()
        elif config.command in ("connector", "c"):
            c = ConnectorAPI(config)
            if config.action == "swap":
                c.swap(config.connector_id, config.new_connector_id, config.dryrun)
            elif config.action == "apps":
                con_moniker = EAAItem(config.connector_id)
                c.list_apps(con_moniker, perf=config.perf)
            else:
                # if command is "akamai eaa connector" we default to "list"
                # Unless the long form "akamai eaa connector list" is used
                # the ArgumentParser won't have the attribute set
                perf = False
                if hasattr(config, 'perf'):
                    perf = config.perf
                c.list(perf=perf)
        elif config.command in ("certificate", "cert"):
            c = CertificateAPI(config)
            if config.action is None or config.action == "list" or config.certificate_id is None:
                c.list()
            elif config.action == "delete":
                c.delete()
            elif config.action == "rotate":
                c.rotate()
            elif config.action == "status":
                c.status()
        elif config.command in ("idp", "i"):
            i = IdentityProviderAPI(config)
            i.list()
        elif config.command in ("report", "r"):
            r = ReportingAPI(config)
            if config.report_name == "clients":
                r.clients()
        else:
            config.parser.print_help()
            sys.exit(1)
    except KeyboardInterrupt:
        print("cli-eaa interrupted.")
        sys.exit(2)
    except Exception:
        logging.exception("cli-eaa general exception")
        sys.exit(200)

# end of file
