#!/usr/bin/env python3

# Copyright 2022 Akamai Technologies, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
cli-eaa
Command Line Input tool for Akamai Enterprise Application Access
:url: https://github.com/akamai/cli-eaa
:author: Antoine Drochon <androcho@akamai.com>
"""

from __future__ import print_function
import sys
import time
import platform
import logging
import fnmatch
import signal
import http.client as http_client
from json import dumps
from math import ceil
from urllib.parse import parse_qsl
import os

# cli-eaa
import _paths
from common import cli, config, BaseAPI, EAAItem, __version__
from eventlog import EventLogAPI
from cert import CertificateAPI
from application import ApplicationAPI
from idp import IdentityProviderAPI
from connector import ConnectorAPI
from directory import DirectoryAPI

verbose = getattr(config, 'verbose', False)

LOG_FMT = '%(asctime)s %(name)s %(levelname).1s %(message)s'


class SearchAPI(BaseAPI):
    """
    Search EAA applications
    2020-08-07: migrated to {OPEN} API
    """

    SCAN_LIMIT = 1000

    def __init__(self, config):
        super(SearchAPI, self).__init__(config, api=BaseAPI.API_Version.OpenAPI)

    def search_app(self, search_pattern):
        """
        Search for a particular application pattern, or all if no pattern is provided.
        Corresponding API documentation: https://techdocs.akamai.com/eaa-api/reference/get-apps
        """

        url_params = {'limit': SearchAPI.SCAN_LIMIT, 'expand': 'true'}
        first_search = self.get('mgmt-pop/apps', params=url_params)
        data = first_search.json()
        app_found = 0
        app_scanned = 0

        # CLI ouput header
        cli.print('#app_id,type,name,host,cname,cert_id,status,reachable')
        stats = self.process_page(data, search_pattern)
        app_scanned += stats[0]
        app_found += stats[1]

        if data.get("meta"):

            app_count = data.get("meta").get("total_count")
            page_offset = data.get("meta").get("offset")
            page_limit = data.get("meta").get("limit")
            page_total = ceil(app_count / page_limit)

            logging.debug("app_count: {}, scanned: {}, offset: {}, limit: {}, pages: {}".format(
                app_count, app_scanned, page_offset, page_limit, page_total))

            for page in range(1, page_total):
                logging.debug("Loading application page {} of {}".format(page, page_total))
                url_params['offset'] = page * page_limit
                search = self.get('mgmt-pop/apps', params=url_params)
                stats = self.process_page(search.json(), search_pattern)
                app_scanned += stats[0]
                app_found += stats[1]

            # CLI ouput footer
            if not config.batch:
                if app_found != app_count:
                    cli.footer("Found %s app(s), total %s app(s)" % (app_found, app_count))
                else:
                    cli.footer("%s app(s)" % app_count)

    def process_page(self, data, search_pattern):
        app_found = 0
        app_scanned = 0

        if data.get("meta"):
            for a in data.get('objects', []):
                app_scanned += 1
                if not search_pattern or (
                    search_pattern and (
                        fnmatch.fnmatch(a.get('name') or "", "*%s*" % search_pattern) or
                        fnmatch.fnmatch(a.get('host') or "", "*%s*" % search_pattern) or
                        fnmatch.fnmatch(a.get('cname') or "", "*%s*" % search_pattern)
                    )
                ):
                    cli.print(('{scheme}{app_id},{app_type},{name},{host},{cname},'
                               '{cert_scheme}{cert_id},{status},{reach}').format(
                        scheme=EAAItem.Type.Application.scheme,
                        app_id=a.get('uuid_url'),
                        app_type=ApplicationAPI.Type(a.get('app_type')).name,
                        name=a.get('name'),
                        host=a.get('host'),
                        cname=a.get('cname'),
                        cert_scheme=EAAItem.Type.Certificate.scheme,
                        cert_id=a.get('cert'),
                        status=ApplicationAPI.Status(a.get('app_status')).name,
                        reach=('Y' if a.get('resource_status', {}).get('host_reachable') else 'F'))
                    )
                    app_found += 1
        return app_scanned, app_found


class ReportingAPI(BaseAPI):
    def __init__(self, config):
        super(ReportingAPI, self).__init__(config, api=BaseAPI.API_Version.OpenAPI)

    def clients(self):
        now = time.time()
        params = {
            'limit': 0,
            'start': int((now - 30 * 24 * 60 * 60) * 1000),
            'end': int(now * 1000)
        }
        resp = self.get('mgmt-pop/clients', params=params)
        if resp.status_code != 200:
            logging.error(resp.text)
        data = resp.json()
        cli.header("#device_id,version,idp_user,idp_host,lastseen")
        for count, c in enumerate(data.get('objects', {})):
            cli.print("{device_id},{version},{idp_user},{idp_host},{lastseen}".format(
                device_id=c.get("device_id"),
                version=c.get("device_info", {}).get("version"),
                idp_user=c.get("idp_user"),
                idp_host=c.get("idp_host"),
                lastseen=c.get("timestamp")
            ))
        cli.footer("%s unique EAA Clients checked-in in the last 30 days" % count)

    def tenant_info(self):
        info = {"cloudzones": []}
        resp = self.get('mgmt-pop/pops?shared=true')
        for eaa_cloudzone in resp.json().get('objects'):
            info['cloudzones'].append(eaa_cloudzone.get('region'))
        print(dumps(info, indent=4))

    def deviceposture_inventory(self, follow=False, interval=300):
        """
        Fetch Device Posture inventory once or until a SIG_TERM is received or Control-C is pressed

        Args:
            follow (bool, optional): Will not terminate and keep pulling every `interval` sec. Defaults to False.
            interval (int, optional): Interval in seconds to pull the inventory. Defaults to 300.
        """
        while not cli.stop_event.is_set():
            start = time.time()
            offset = 0
            limit = 3000
            devices = []

            while not cli.stop_event.is_set():
                page_start = time.time()
                resp = self.get('device-posture/inventory/list', params={'offset': offset, 'limit': limit})
                if resp.status_code != 200:
                    cli.print_error("Non HTTP 200 response fromt the API")
                    cli.exit(2)
                doc = resp.json()
                meta = doc.get('meta', {})
                next_page = meta.get('next')
                limit = meta.get('limit')
                objects_in_page = doc.get('objects', [])
                offset = dict(parse_qsl(next_page)).get('offset')
                logging.debug("--- DP Inventory page with {c} devices fetched in {elapsed:.2f} seconds".format(
                              c=len(objects_in_page), elapsed=time.time()-page_start))
                devices += objects_in_page
                if not next_page:
                    break

            print(dumps(devices, indent=4))
            logging.debug("DP Inventory Total {device_count} devices fetched in {elapsed:.2f} seconds".format(
                          device_count=len(devices), elapsed=time.time()-start))
            if follow is False:
                break
            else:
                wait_time = interval - (time.time() - start)  # interval - time elapsed
                if wait_time > 0:
                    logging.debug("Sleeping for {:.2f} seconds".format(wait_time))
                    time.sleep(wait_time)
                else:
                    logging.warn("Fetching data takes more time than the interval, "
                                 "consider increase the --interval parameter")

    def deviceposture_devicehistory(self, device_id):
        resp = self.get('device-posture/inventory/device-history/{deviceId}'.format(deviceId=device_id))
        print(dumps(resp.json(), indent=4))



def setup_logging():

    logging.basicConfig(filename=config.logfile, level=cli.log_level(), format=LOG_FMT)

    # Special handling for the Requests library
    if config.debug:
        requests_log = logging.getLogger("requests.packages.urllib3")
        http_client.HTTPConnection.debuglevel = 1
        def httpclient_log(*args):
            requests_log.log(logging.DEBUG, " ".join(args))
        http_client.print = httpclient_log


if __name__ == "__main__":

    setup_logging()
    logging.debug("Python %s" % platform.python_version())

    signal.signal(signal.SIGTERM, cli.exit_gracefully)

    try:
        if config.command == "version":
            print(__version__)
        elif config.command in ("log", "l"):
            events = EventLogAPI(config)
            events.fetch_logs(cli.exit_gracefully, cli.stop_event)
        elif config.command in ("search", "s"):
            s = SearchAPI(config)
            s.search_app(config.pattern)
        elif config.command in ("dir", "d"):
            if config.action is None or config.action == "list":
                directory_id = None
                if hasattr(config, 'directory_id'):
                    directory_id = config.directory_id
                d = DirectoryAPI(config, directory_id)
                d.list_directories()
            else:
                d = DirectoryAPI(config, config.directory_id)
                if config.action == "sync":
                    d.synchronize()
                elif config.action == "addgroup":
                    d.addgroup(config.dn)
                elif config.action == "addovlgroup":
                    d.addoverlaygroup(config.group)
                elif config.action == "syncgroup":
                    d.synchronize_group(config.group_uuid)
                else:
                    raise Exception("Unsupported directory action: %s" % config.action)
        elif config.command in ("app", "a"):
            a = ApplicationAPI(config)
            a.process_command()
        elif config.command in ("connector", "c"):
            c = ConnectorAPI(config)
            perf = hasattr(config, 'perf') and config.perf
            if config.action == "swap":
                c.swap(config.connector_id, config.new_connector_id, config.dryrun)
            elif config.action == "apps":
                con_moniker = EAAItem(config.connector_id)
                c.list_apps(con_moniker, perf=perf)
            else:
                # if command is "akamai eaa connector" we default to "list"
                # Unless the long form "akamai eaa connector list" is used
                # the ArgumentParser won't have the attribute set
                json = hasattr(config, 'json') and config.json
                show_apps = hasattr(config, 'showapps') and config.showapps
                tail = hasattr(config, 'tail') and config.tail
                interval = hasattr(config, 'interval') and config.interval
                c.list(perf, json, show_apps, tail, interval, cli.stop_event)
        elif config.command in ("certificate", "cert"):
            c = CertificateAPI(config)
            if config.action is None or config.action == "list" or config.certificate_id is None:
                c.list()
            elif config.action == "delete":
                c.delete()
            elif config.action == "rotate":
                c.rotate()
            elif config.action == "status":
                c.status()
        elif config.command in ("idp", "i"):
            i = IdentityProviderAPI(config)
            i.list()
        elif config.command in ("report", "r"):
            r = ReportingAPI(config)
            if config.report_name == "clients":
                r.clients()
        elif config.command in ("info", ):
            r = ReportingAPI(config)
            r.tenant_info()
        elif config.command in ("dp", ):
            if config.dpcommand == "inventory":
                s = ReportingAPI(config)
                s.deviceposture_inventory(config.tail, config.interval)
            elif config.dpcommand == "history":
                s = ReportingAPI(config)
                s.deviceposture_devicehistory(config.device_id)
            else:
                print("invalid Device Posture command: {config.dpcommand}")
        else:
            config.parser.print_help()
            sys.exit(1)
    except KeyboardInterrupt:
        print("cli-eaa interrupted.")
        sys.exit(2)
    except BrokenPipeError:
        # Python flushes standard streams on exit; redirect remaining output
        # to /dev/null to avoid another BrokenPipeError at shutdown
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        sys.exit(1)  # Python exits with error code 1 on EPIPE
    except Exception:
        logging.exception("cli-eaa general exception")
        sys.exit(200)

# end of file
